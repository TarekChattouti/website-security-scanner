{
    "check_01_http_headers": "Configure security-related HTTP headers in WordPress: X-Frame-Options (prevent clickjacking), X-XSS-Protection (XSS filtering), X-Content-Type-Options (MIME sniffing protection). Use security plugins like Wordfence or implement via .htaccess or server configuration. These headers protect against common web attacks.",
    "check_02_wp_cron": "Secure wp-cron.php by disabling it via DISABLE_WP_CRON constant and setting up proper server-side cron jobs instead. If keeping it enabled, restrict access using .htaccess rules or server blocks. Monitor for unauthorized cron job executions and ensure scheduled tasks run securely.",
    "check_03_robots_txt": "Review WordPress robots.txt for inadvertent disclosure of sensitive directories like /wp-admin/, /wp-includes/, or plugin paths. Don't rely on robots.txt for security - use proper access controls. Consider if search engine indexing restrictions are actually beneficial for your site.",
    "check_04_theme_info": "Remove or restrict access to theme information files (style.css headers, readme.txt) that reveal theme names and versions to attackers. Use security plugins to hide WordPress version info, customize theme headers, and implement proper file permissions. Consider using child themes for customizations.",
    "check_05_wpscan": "Address all vulnerabilities identified by WPScan: update WordPress core, themes, and plugins immediately. Implement automatic updates where safe, remove unused plugins/themes, and use security plugins for ongoing protection. Subscribe to WordPress security advisories and maintain an update schedule.",
    "check_06_wp_vulns": "Remediate WordPress-specific vulnerabilities: patch known security issues, update to latest WordPress version, audit custom code for security flaws, implement Web Application Firewall (WAF), and conduct regular security assessments. Use reputable security plugins and follow WordPress security best practices.",
    "check_07_theme_vulns": "Address theme vulnerabilities by updating to latest versions, removing unused themes, auditing custom theme code, and using themes from reputable developers only. Implement theme security scanning, avoid themes with known vulnerabilities, and consider using security-focused themes with regular updates."
}
