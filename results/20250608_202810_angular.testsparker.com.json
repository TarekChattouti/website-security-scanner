{
  "url": "http://angular.testsparker.com",
  "results": [
    {
      "name": "Start scan",
      "status": "pass",
      "description": "Scan started",
      "evidence": "http://angular.testsparker.com",
      "risk": 1
    },
    {
      "name": "Missing HTTP header - Referrer-Policy",
      "status": "fail",
      "description": "Checks for Referrer-Policy header",
      "evidence": null,
      "risk": 2
    },
    {
      "name": "HttpOnly flag of cookie",
      "status": "pass",
      "description": "Checks if cookies have HttpOnly flag",
      "evidence": [],
      "risk": 1
    },
    {
      "name": "Missing HTTP header - Content-Security-Policy and Security.txt",
      "status": "fail",
      "description": "Checks for Content-Security-Policy header and .well-known/security.txt file",
      "evidence": {
        "Content-Security-Policy": null,
        "security.txt_present": false
      },
      "risk": 4
    },
    {
      "name": "Detect email addresses on page",
      "status": "pass",
      "description": "Detects email addresses in page content, mailto links, and source",
      "evidence": [],
      "risk": 1
    },
    {
      "name": "Detect mixed content (HTTP inside HTTPS)",
      "status": "pass",
      "description": "Detects HTTP resources loaded in HTTPS pages",
      "evidence": [],
      "risk": 1
    },
    {
      "name": "Detect website technologies",
      "status": "pass",
      "description": "Detects technologies used by the website",
      "evidence": {
        "tech": [
          {
            "name": "Bootstrap",
            "version": null
          },
          {
            "name": "Apache HTTP Server",
            "version": "2.4.29"
          },
          {
            "name": "Ubuntu",
            "version": null
          }
        ],
        "headers": []
      },
      "risk": 1
    },
    {
      "name": "Check for server-side software vulnerabilities (CVE)",
      "status": "fail",
      "description": "Checks for known CVEs in server software using the NVD API",
      "evidence": {
        "Server": "Apache/2.4.29 (Ubuntu)",
        "X-Powered-By": null,
        "cve_info": [
          "Apache 2.4.29 - CVEs found: ['CVE-2017-15710', 'CVE-2017-15715', 'CVE-2018-1283', 'CVE-2018-1312']"
        ],
        "nvd_cves": [
          {
            "id": "CVE-2017-15710",
            "desc": "In Apache httpd 2.0.23 to 2.0.65, 2.2.0 to 2.2.34, and 2.4.0 to 2.4.29, mod_authnz_ldap, if configured with AuthLDAPCharsetConfig, uses the Accept-Language header value to lookup the right charset encoding when verifying the user's credentials. If the header value is not present in the charset conversion table, a fallback mechanism is used to truncate it to a two characters value to allow a quick retry (for example, 'en-US' is truncated to 'en'). A header value of less than two characters forces an out of bound write of one NUL byte to a memory location that is not part of the string. In the worst case, quite unlikely, the process would crash which could be used as a Denial of Service attack. In the more likely case, this memory is already reserved for future use and the issue has no effect at all."
          },
          {
            "id": "CVE-2017-15715",
            "desc": "In Apache httpd 2.4.0 to 2.4.29, the expression specified in <FilesMatch> could match '$' to a newline character in a malicious filename, rather than matching only the end of the filename. This could be exploited in environments where uploads of some files are are externally blocked, but only by matching the trailing portion of the filename."
          },
          {
            "id": "CVE-2018-1283",
            "desc": "In Apache httpd 2.4.0 to 2.4.29, when mod_session is configured to forward its session data to CGI applications (SessionEnv on, not the default), a remote user may influence their content by using a \"Session\" header. This comes from the \"HTTP_SESSION\" variable name used by mod_session to forward its data to CGIs, since the prefix \"HTTP_\" is also used by the Apache HTTP Server to pass HTTP header fields, per CGI specifications."
          },
          {
            "id": "CVE-2018-1312",
            "desc": "In Apache httpd 2.2.0 to 2.4.29, when generating an HTTP Digest authentication challenge, the nonce sent to prevent reply attacks was not correctly generated using a pseudo-random seed. In a cluster of servers using a common Digest authentication configuration, HTTP requests could be replayed across servers by an attacker without detection."
          }
        ]
      },
      "risk": 5
    },
    {
      "name": "Client access policies",
      "status": "pass",
      "description": "Checks for crossdomain.xml and clientaccesspolicy.xml",
      "evidence": {
        "crossdomain.xml": "Missing",
        "clientaccesspolicy.xml": "Missing"
      },
      "risk": 1
    },
    {
      "name": "Check if robots.txt exists",
      "status": "pass",
      "description": "Checks for robots.txt file and reports its presence/content",
      "evidence": "robots.txt missing",
      "risk": 1
    },
    {
      "name": "Check if .well-known/security.txt exists",
      "status": "fail",
      "description": "Checks for .well-known/security.txt file and reports its presence/content",
      "evidence": "security.txt missing",
      "risk": 2
    },
    {
      "name": "Check for untrusted SSL certificates",
      "status": "pass",
      "description": "Checks for SSL certificate trust issues",
      "evidence": "SSL certificate is trusted.",
      "risk": 1
    },
    {
      "name": "Check if HTTP TRACE/DEBUG methods are enabled",
      "status": "pass",
      "description": "Checks for TRACE/DEBUG HTTP methods",
      "evidence": {
        "TRACE": "not allowed",
        "DEBUG": "not allowed"
      },
      "risk": 1
    },
    {
      "name": "Check if OPTIONS method is enabled",
      "status": "fail",
      "description": "Checks for OPTIONS HTTP method and reports Allow header",
      "evidence": {
        "status_code": 200,
        "allow_header": "OPTIONS,HEAD,GET,POST"
      },
      "risk": 2
    },
    {
      "name": "Enforce HTTPS-only",
      "status": "fail",
      "description": "Checks if HTTP redirects to HTTPS",
      "evidence": {
        "original_url": "http://angular.testsparker.com",
        "final_url": "http://angular.testsparker.com/",
        "redirect_chain": [
          "http://angular.testsparker.com/"
        ]
      },
      "risk": 4
    },
    {
      "name": "Detect directory listing",
      "status": "pass",
      "description": "Detects if directory listing is enabled",
      "evidence": null,
      "risk": 1
    },
    {
      "name": "Detect unencrypted password forms",
      "status": "pass",
      "description": "Detects password forms not using HTTPS",
      "evidence": null,
      "risk": 1
    },
    {
      "name": "Detect error messages in responses",
      "status": "pass",
      "description": "Detects error messages in HTTP responses",
      "evidence": null,
      "risk": 1
    },
    {
      "name": "Detect debug messages",
      "status": "pass",
      "description": "Detects debug messages in HTML/JS",
      "evidence": null,
      "risk": 1
    },
    {
      "name": "Detect HTML code comments",
      "status": "pass",
      "description": "Detects HTML comments in page source",
      "evidence": null,
      "risk": 1
    },
    {
      "name": "Missing HTTP header - Strict-Transport-Security",
      "status": "fail",
      "description": "Checks for HSTS header",
      "evidence": null,
      "risk": 3
    },
    {
      "name": "Missing HTTP header - X-Content-Type-Options",
      "status": "fail",
      "description": "Checks for X-Content-Type-Options header",
      "evidence": null,
      "risk": 2
    },
    {
      "name": "Missing HTTP header - Feature/Permissions-Policy",
      "status": "fail",
      "description": "Checks for Permissions-Policy or Feature-Policy header",
      "evidence": {
        "Permissions-Policy": null,
        "Feature-Policy": null
      },
      "risk": 2
    },
    {
      "name": "Detect passwords in URL query string",
      "status": "pass",
      "description": "Detects password values in URL",
      "evidence": null,
      "risk": 1
    },
    {
      "name": "Cookie domain too loosely scoped",
      "status": "pass",
      "description": "Checks if cookie domain is too broad (e.g., .example.com)",
      "evidence": null,
      "risk": 1
    },
    {
      "name": "Detect cross-domain JavaScript inclusions",
      "status": "pass",
      "description": "Detects JS loaded from other domains",
      "evidence": null,
      "risk": 1
    },
    {
      "name": "Internal error code in response",
      "status": "pass",
      "description": "Checks for 5xx error codes",
      "evidence": null,
      "risk": 1
    },
    {
      "name": "Missing Secure flag on cookie",
      "status": "pass",
      "description": "Checks if cookies have Secure flag",
      "evidence": null,
      "risk": 1
    },
    {
      "name": "Detect login interfaces",
      "status": "pass",
      "description": "Detects login forms or endpoints",
      "evidence": null,
      "risk": 1
    },
    {
      "name": "Verify secure password submission",
      "status": "pass",
      "description": "Checks if password forms submit over HTTPS",
      "evidence": null,
      "risk": 1
    },
    {
      "name": "Detect sensitive data in HTML",
      "status": "pass",
      "description": "Detects SSNs, card numbers in HTML",
      "evidence": null,
      "risk": 1
    },
    {
      "name": "Detect unsafe Content-Security-Policy config",
      "status": "info",
      "description": "Checks for unsafe CSP settings",
      "evidence": "No CSP header present",
      "risk": 1
    },
    {
      "name": "Detect exposed OpenAPI or Swagger files",
      "status": "pass",
      "description": "Checks for openapi.json or swagger.json",
      "evidence": null,
      "risk": 1
    },
    {
      "name": "Detect file upload fields",
      "status": "pass",
      "description": "Detects file upload forms",
      "evidence": null,
      "risk": 1
    },
    {
      "name": "Test for SQLi via parameter injection",
      "status": "info",
      "description": "No query parameters to test for SQLi",
      "evidence": null,
      "risk": 1
    },
    {
      "name": "Detect password values in later response",
      "status": "pass",
      "description": "Detects password values in HTTP response",
      "evidence": null,
      "risk": 1
    },
    {
      "name": "Path disclosure in error messages",
      "status": "fail",
      "description": "Detects file path disclosure in errors",
      "evidence": [
        "bootstrap.min.js",
        "jquery-ui.min.js",
        "select2.min.js"
      ],
      "risk": 3
    },
    {
      "name": "Session token in URL",
      "status": "pass",
      "description": "Detects session tokens in URL query or fragment",
      "evidence": null,
      "risk": 1
    },
    {
      "name": "Discovery of exposed API endpoints",
      "status": "pass",
      "description": "Detects exposed API endpoints (e.g., /api, /v1, /graphql)",
      "evidence": null,
      "risk": 1
    }
  ]
}