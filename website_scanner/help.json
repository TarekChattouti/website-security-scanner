{
    "check_01_start_scan": "No action needed. This is just the scan start marker.",
    "check_02_missing_referrer_policy": "Add a Referrer-Policy header to control how much referrer information is shared when users click links. Configure in your web server (Apache: Header always set Referrer-Policy 'strict-origin-when-cross-origin', Nginx: add_header Referrer-Policy 'strict-origin-when-cross-origin') or via meta tags.",
    "check_03_httponly_cookie": "Set the HttpOnly flag on all cookies to prevent JavaScript from accessing them, reducing XSS attack impact. In PHP: setcookie('name', 'value', ['httponly' => true]). In Apache: Header edit Set-Cookie ^(.*)$ $1;HttpOnly. This protects session cookies from client-side theft.",
    "check_04_missing_csp": "Implement Content-Security-Policy header to prevent XSS, clickjacking, and code injection. Start with a restrictive policy like 'default-src self' and gradually allow trusted sources. Use CSP report-only mode first to test. Configure via HTTP headers or meta tags.",
    "check_05_detect_emails": "Remove or obfuscate email addresses from public pages to prevent automated harvesting by spammers. Use contact forms instead of direct email links, implement email encoding (name[at]domain[dot]com), or use JavaScript-based email reveal methods.",
    "check_06_mixed_content": "Ensure all resources (images, scripts, stylesheets, iframes) are loaded over HTTPS when your site uses HTTPS. Mixed content warnings can break functionality and compromise security. Update hardcoded HTTP URLs to HTTPS or use protocol-relative URLs (//example.com/script.js).",
    "check_07_tech_detect": "Consider hiding technology stack details (server versions, framework info) to reduce attack surface reconnaissance. Remove or customize server banners, error pages, and HTTP headers that reveal software versions. Use custom error pages and disable server signature headers.",
    "check_08_cve_server_software": "Update server software (Apache, Nginx, PHP, etc.) to latest versions to patch known vulnerabilities (CVEs). Set up automated security updates where possible. Subscribe to security advisories for your tech stack and maintain an inventory of all software components.",
    "check_09_client_access_policy": "Remove crossdomain.xml and clientaccesspolicy.xml files unless specifically needed for Flash/Silverlight applications. These files can allow unintended cross-domain access. If required, restrict allowed domains to minimum necessary and use HTTPS endpoints only.",
    "check_10_robots_txt": "Review robots.txt for inadvertent disclosure of sensitive directories, admin panels, or private content. Don't use robots.txt to 'hide' sensitive areas as it's publicly accessible. Use proper access controls instead. Consider if crawling restrictions are actually needed.",
    "check_11_security_txt": "Implement .well-known/security.txt file to provide security researchers with contact information for responsible disclosure. Include Contact, Expires, and optionally Encryption (PGP key), Policy (security policy URL), and Acknowledgments fields. Follow RFC 9116 standard.",
    "check_12_ssl_cert": "Ensure SSL certificate is valid, trusted, and properly configured. Check expiration dates, certificate chain completeness, and domain name matching. Use certificates from trusted CAs, implement automatic renewal, and monitor certificate status regularly.",
    "check_13_trace_debug": "Disable TRACE and DEBUG HTTP methods on your web server as they can be used for XSS attacks and information disclosure. In Apache: TraceEnable Off. In Nginx: These methods are disabled by default. Verify with curl -X TRACE or -X DEBUG.",
    "check_14_options_method": "Restrict the OPTIONS HTTP method if not needed for CORS. If CORS is required, configure it properly with specific allowed origins, methods, and headers. Avoid using wildcard (*) in production. Configure Access-Control-Allow-Origin, Access-Control-Allow-Methods headers appropriately.",
    "check_15_https_redirect": "Implement automatic HTTP to HTTPS redirection using 301 permanent redirects. Configure at server level (Apache: Redirect permanent / https://example.com/, Nginx: return 301 https://$server_name$request_uri) rather than application level for better performance and security.",
    "check_16_directory_listing": "Disable directory browsing/indexing in web server configuration to prevent exposure of file structure and potentially sensitive files. In Apache: Options -Indexes. In Nginx: autoindex off. Also ensure proper index files (index.html, index.php) exist in all directories.",
    "check_17_unencrypted_password_form": "Ensure all authentication forms submit over HTTPS only. Use form action='https://...' or protocol-relative URLs. Implement HSTS headers to force HTTPS. Never transmit passwords over unencrypted HTTP connections as they can be intercepted.",
    "check_18_error_messages": "Configure custom error pages that don't reveal sensitive system information, file paths, or database details. Log detailed errors server-side for debugging while showing generic messages to users. Implement centralized error handling and logging.",
    "check_19_debug_messages": "Remove debug output, stack traces, and verbose error messages from production code. Disable debug modes in frameworks and applications. Use environment-specific configurations and ensure production deployments don't include development debugging features.",
    "check_20_html_comments": "Remove sensitive information from HTML comments including passwords, API keys, internal URLs, developer notes, and commented-out code. Automate comment stripping in your build process. Comments are visible in page source and can reveal sensitive information.",
    "check_21_missing_hsts": "Implement HTTP Strict Transport Security (HSTS) header to prevent protocol downgrade attacks and cookie hijacking. Use 'Strict-Transport-Security: max-age=31536000; includeSubDomains; preload' and consider adding your domain to browser preload lists for maximum protection.",
    "check_22_missing_x_content_type": "Add X-Content-Type-Options: nosniff header to prevent MIME type sniffing attacks where browsers incorrectly interpret file types. This prevents attackers from uploading files that could be executed as scripts. Essential for file upload functionality.",
    "check_23_missing_permissions_policy": "Implement Permissions-Policy (formerly Feature-Policy) header to control browser features like camera, microphone, geolocation access. Example: 'Permissions-Policy: camera=(), microphone=(), geolocation=self'. This reduces attack surface and protects user privacy.",
    "check_24_password_in_url": "Never include passwords, API keys, or sensitive tokens in URLs as they appear in logs, referrer headers, and browser history. Use POST requests with request body, HTTP headers, or secure session storage instead. Implement proper authentication mechanisms.",
    "check_25_cookie_domain_scope": "Set cookie domains as narrowly as possible to prevent subdomain access to cookies. Use 'Domain=.example.com' only when cross-subdomain access is needed. Specific domains like 'Domain=app.example.com' provide better isolation and security.",
    "check_26_cross_domain_js": "Avoid including JavaScript from untrusted third-party domains which can lead to XSS and data theft. Use Subresource Integrity (SRI) hashes for external scripts, implement Content Security Policy, and regularly audit third-party dependencies. Host critical scripts locally when possible.",
    "check_27_internal_error_code": "Investigate and resolve server errors (5xx status codes) which indicate backend problems, potential security issues, or system instability. Monitor error logs, implement proper error handling, and ensure graceful degradation. Set up alerting for recurring errors.",
    "check_28_missing_secure_cookie": "Set the Secure flag on all cookies to ensure they're only transmitted over HTTPS connections. In PHP: setcookie('name', 'value', ['secure' => true]). In Apache: Header edit Set-Cookie ^(.*)$ $1;Secure. Essential for session cookies and authentication tokens.",
    "check_29_login_interface": "Secure login interfaces with rate limiting, CAPTCHA, account lockouts, and strong password policies. Implement multi-factor authentication (MFA), use HTTPS, and consider hiding admin login URLs. Monitor for brute force attacks and implement IP-based restrictions.",
    "check_30_secure_password_submission": "Ensure password forms use HTTPS, implement proper CSRF protection, use POST method only, and include proper form validation. Never log passwords, use secure session handling, and implement password strength requirements with proper feedback.",
    "check_31_sensitive_data_in_html": "Remove sensitive data (SSNs, credit card numbers, API keys, internal IDs) from HTML source, JavaScript variables, and form fields. Use server-side processing, implement data masking, and ensure sensitive operations occur on backend only. Regular expressions can help detect exposed sensitive patterns.",
    "check_32_unsafe_csp": "Review and strengthen Content-Security-Policy to eliminate unsafe directives like 'unsafe-inline' and 'unsafe-eval'. Use nonces or hashes for inline scripts, implement strict CSP policies, and regularly test with CSP violation reports. Consider using CSP Level 3 features for better security.",
    "check_33_exposed_openapi": "Restrict access to OpenAPI/Swagger documentation files or remove them from production environments. If needed in production, implement authentication, use IP whitelisting, and ensure they don't expose sensitive internal APIs or security details. Consider separate environments for documentation.",
    "check_34_file_upload": "Implement comprehensive file upload security: validate file types by content (not just extension), scan for malware, restrict file sizes, use safe storage locations outside webroot, implement filename sanitization, and check for executable content. Consider cloud-based scanning solutions.",
    "check_35_sqli_test": "Prevent SQL injection by using parameterized queries/prepared statements exclusively, implementing input validation and sanitization, using ORM frameworks properly, applying principle of least privilege to database users, and conducting regular security testing. Never concatenate user input into SQL queries.",
    "check_36_password_in_response": "Never include passwords, tokens, or sensitive credentials in HTTP responses, JSON APIs, or page content. Implement proper session management, use secure authentication flows, and ensure password reset mechanisms don't expose credentials. Log security events without sensitive data.",
    "check_37_path_disclosure": "Prevent file path disclosure in error messages by implementing custom error handlers, using relative paths in application logic, configuring proper error pages, and ensuring stack traces don't leak system information. Implement centralized error handling and logging.",
    "check_38_session_token_in_url": "Never pass session tokens, authentication tokens, or sensitive IDs in URLs. Use secure HTTP-only cookies, POST request bodies, or HTTP headers instead. URLs appear in logs, referrer headers, and browser history, making tokens vulnerable to exposure.",
    "check_39_exposed_api_endpoints": "Secure API endpoints with proper authentication (OAuth, API keys), authorization checks, rate limiting, and input validation. Implement API versioning, use HTTPS only, and ensure endpoints don't expose more data than necessary. Consider API gateways for centralized security controls."
}